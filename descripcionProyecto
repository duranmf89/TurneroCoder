Tematica del proyecto:

INTRODUCCION
El presente documento presenta un proyecto de Sistema de Gestión de Reservas Deportivas, el cual está diseñado para simplificar la organización 
y reserva de espacios deportivos, así como para permitir a los usuarios llevar un registro de sus actividades deportivas.
A continuación, se detallan los objetivos, la situación problemática, el modelo de negocio y otros aspectos relevantes del proyecto
Vistas, Funciones, Stored Procedures, Triggers).

OBJETIVO
El objetivo principal de este proyecto es proporcionar una plataforma integral para la gestión de reservas deportivas, que permita a los
usuarios reservar canchas, tener equipos, revisar su historial de reservas, realizar pagos a traves de la plataforma, suscribirse a distintos
eventos deportivos de manera eficiente y organizada, entre otros. Además se buscafacilitar el registro de usuarios, la administración de pagos
y la generación de informes sobre las actividades realizadas.

SITUACION PROBLEMATICA
La falta de un sistema centralizado para la gestión de reservas deportivas conlleva a problemas como la dificultad para encontrar y reservar
espacios disponibles, la falta de seguimiento de las reservas realizadas y la ausencia de un registro detallado de las actividades deportivas.
Esto puede resultar en una experiencia desorganizada y poco eficiente para los usuarios, así como en la pérdida de oportunidades de reserva y
de control sobre los pagos.

MODELO DE NEGOCIO
El Sistema de Gestión de Reservas Deportivas se centra en facilitar un acceso eficiente a la información a través de su robusta base de datos.
Ofrece servicios de reserva de espacios deportivos, historiales de reservas, notificaciones sobre eventos y recordatorios de reservas, entre
otras. La base de datos también se emplea para analizar las interacciones entre usuarios, equipos y eventos deportivos, con el objetivo de
mejorar continuamente la experiencia del usuario. Con un enfoque en la eficiencia operativa y la excelencia en el servicio, el sistema busca 
proporcionar una gestión óptima de los espacios deportivos, fomentando así la participación en actividades deportivas y promoviendo una cultura 
saludable y activa.

HERRAMIENTAS / TECNOLOGIA
El sistema utiliza SQL (Structured Query Language) para realizar consultas y manipular los datos almacenados en la base de datos,
lo que permite a los usuarios realizar una variedad de operaciones, como buscar canchas disponibles, realizar reservas, revisar el
historial de reservas y dejar reseñas.
La base de datos utiliza claves primarias, claves foráneas y otros tipos de restricciones para mantener la integridad de los datos
y establecer relaciones entre las diferentes entidades.

VIEWS:
VIEW UsuariosConMasDeUnEquipo:

Propósito: Esta vista muestra los usuarios que están asociados a más de un equipo.
Estructura: La vista realiza una consulta que une las tablas de Usuarios, Usuarios_Equipos y Equipos, agrupando por el ID del usuario y 
contando la cantidad de equipos asociados a cada usuario. Luego, filtra los resultados para mostrar solo aquellos usuarios que tienen más 
de un equipo.
Uso: Se puede realizar una búsqueda específica por apellido utilizando la consulta proporcionada
(SELECT * FROM UsuariosConMasDeUnEquipo WHERE apellido = 'Apellido';), donde 'Apellido' es el apellido del usuario que se desea buscar.


VIEW ReservasPorFecha:

Propósito: Esta vista muestra el número de reservas realizadas para cada fecha.
Estructura: La vista realiza una consulta que cuenta el número de reservas para cada fecha en la tabla de Reservas, agrupando por la fecha.
Uso: Se puede realizar una búsqueda para obtener las reservas de abril y mayo utilizando la consulta proporcionada 
(SELECT * FROM ReservasPorFecha WHERE MONTH(fecha) IN (4, 5);), donde 4 y 5 son los meses de abril y mayo respectivamente.


VIEW PagosPorUsuario:

Propósito: Esta vista muestra los pagos realizados por cada usuario, ordenados por fecha de manera descendente.
Estructura: La vista realiza una consulta que une las tablas de Pagos y Usuarios, mostrando el apellido, nombre, monto del pago y
fecha del pago para cada usuario.
Uso: Esta vista proporciona una lista de pagos realizados por cada usuario, ordenados por fecha. No requiere parámetros específicos 
para su uso.


VIEW ReservasPorUsuario:

Propósito: Esta vista muestra las reservas realizadas por cada usuario, incluyendo detalles como fecha, hora, cancha y estado de la reserva.
Estructura: La vista realiza una consulta que une las tablas de Reservas, Usuarios, Canchas y Estados_Reservas, mostrando el nombre, 
apellido y DNI del usuario, así como detalles de la reserva como fecha, hora, nombre de la cancha y estado de la reserva.
Uso: Se puede realizar una búsqueda específica utilizando el DNI del usuario con la consulta proporcionada 
(SELECT * FROM ReservasPorUsuario WHERE dni = 'DNIUsuario';), donde 'DNIUsuario' es el DNI del usuario que se desea buscar.

FUNCIONES

FN ContarReservasPorMes:

Propósito: Esta función cuenta el número de reservas realizadas en un mes y año específicos.
Parámetros de entrada: 2 parametros: el mes y el año.
Estructura: La función comienza declarando una variable local para almacenar la cantidad de reservas. Luego, realiza una consulta SQL
para contar las filas en la tabla de reservas que coincidan con el mes y el año proporcionados. Finalmente, devuelve el resultado de 
la consulta.
Uso: Para utilizar esta función, se llama a ContarReservasPorMes con el mes y el año deseados como argumentos. 
Por ejemplo: "SELECT ContarReservasPorMes(4, 2024)" devolverá el número de reservas realizadas en abril de 2024.

FN ContarUsuariosRegistradosPorMes:

Propósito: Esta función cuenta el número de usuarios registrados en un mes y año específicos.
Parámetros de entrada: 2 parametros: el mes y el año.
Estructura: Esta función comienza declarando una variable local para almacenar la cantidad de usuarios. Luego realiza una consulta SQL
para contar las filas en la tabla de usuarios que coincidan con el mes y el año proporcionados. 
Uso: Para utilizar esta función, se llama a ContarUsuariosRegistradosPorMes con el mes y el año deseados como argumentos. 
Por ejemplo: "SELECT ContarUsuariosRegistradosPorMes(4, 2024)" devolverá el número de usuarios registrados en abril de 2024.

STORED PROCEDURES

SP GenerarReporteIngresosPorMes:

Propósito: Este procedimiento genera un reporte de ingresos por mes dentro de un rango de fechas especificado.
Parámetros de entrada: Recibe dos parámetros de tipo DATE: fecha_inicio y fecha_fin, que representan el rango de fechas para el reporte.
Resultados de salida: Al finalizar su ejecución, este procedimiento devuelve un conjunto de resultados que incluye el año, mes y la suma
total de ingresos para cada mes dentro del rango de fechas especificado.
Estructura: El procedimiento realiza una consulta que selecciona el año, mes y la suma total de los ingresos (monto) de los pagos dentro
del rango de fechas especificado. Luego, agrupa los resultados por año y mes, y los ordena cronológicamente.
Uso: Se puede llamar al procedimiento con un rango de fechas deseado utilizando la siguiente sintaxis:
"CALL GenerarReporteIngresosPorMes('2023-01-01', '2024-12-31');"


SP ConsultarPagosPorUsuarioYFecha:

Propósito: Este procedimiento consulta los pagos realizados por un usuario específico en una fecha determinada.
Parámetros de entrada: Recibe dos parámetros: dni_usuario (DNI del usuario a consultar) y fecha_consulta 
(fecha en la que se realizará la consulta de pagos).
Resultados de salida: Al finalizar su ejecución, este procedimiento devuelve un conjunto de resultados que incluye el apellido, nombre,
fecha y monto de los pagos realizados por el usuario especificado en la fecha indicada.
Estructura: El procedimiento realiza una consulta que selecciona el apellido, nombre, fecha y monto de los pagos realizados por el usuario
especificado en la fecha indicada. La consulta se realiza mediante una unión entre las tablas de Pagos y Usuarios, utilizando el DNI para
filtrar los resultados.
Uso: Se puede llamar al procedimiento con el DNI del usuario y la fecha deseada utilizando la siguiente sintaxis:
"CALL ConsultarPagosPorUsuarioYFecha('23456789', '2024-03-27');"


TRIGGERS

Trigger TRG_LOG_Usuarios:

Evento: Este trigger se activa después de cada inserción en la tabla "Usuarios".
Propósito: Registra los detalles de la inserción en la tabla de logs "logGeneral", incluyendo el tipo de acción (INSERT), la tabla afectada
("Usuarios"), el usuario que realizó la acción (obtenido a través de CURRENT_USER()), así como el nombre, apellido, DNI y correo electrónico
del nuevo usuario insertado.
Funcionamiento: Al activarse el trigger después de una inserción en la tabla "Usuarios", se inserta una nueva fila en la tabla "logGeneral" 
con los detalles de la inserción y los datos del nuevo usuario.


Trigger TRG_UPDATE_CORREO:

Evento: Este trigger se activa antes de cada actualización en la tabla "Usuarios".
Propósito: Registra los cambios en el correo electrónico de un usuario en la tabla de logs "logEvents".
Funcionamiento: Antes de que se produzca la actualización del correo electrónico de un usuario en la tabla "Usuarios", este trigger
compara el correo electrónico antiguo (OLD.correo) con el nuevo (NEW.correo). Si son diferentes, se inserta una nueva fila en la tabla
"logEvents" con los detalles de la actualización, incluyendo el correo electrónico anterior y el nuevo, el tipo de acción (UPDATE), 
la tabla afectada ("Usuarios") y el usuario que realizó la acción (obtenido a través de CURRENT_USER()).
